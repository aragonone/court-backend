name: Testnet CI/CD
on:
  push:
    branches:
    # Executes on any non master commit, but release and deploy steps only run on development
    # This is useful to see if tests are passing during PR review
    - '**'
    - '!master'
env:
  # This is a base repository and we use ${GITHUB_SHA} to set the version of the container
  REPO: docker.pkg.github.com/aragonone/court-backend/testnet

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p ${{ secrets.GITHUB_TOKEN }}
    - run: .github/scripts/docker-build.sh

  test-server:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p ${{ secrets.GITHUB_TOKEN }}
    - run: .github/scripts/test-server/run.sh

  release:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: test-server
    steps:
    - run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p ${{ secrets.GITHUB_TOKEN }}
    - run: docker pull $REPO:${GITHUB_SHA}
    - run: docker tag $REPO:${GITHUB_SHA} $REPO:latest
    - run: docker push $REPO:latest

  deploy:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: release
    steps:
    # config cluster access (requires KUBE_CA, KUBE_SERVER, KUBE_TOKEN secrets)
    - run: |
        echo ${{ secrets.KUBE_CA }} | base64 -d > ca.crt
        kubectl config set-cluster aragon --server=${{ secrets.KUBE_SERVER }} --certificate-authority=ca.crt
        kubectl config set-credentials aragon --token=$(base64 -d <<< ${{ secrets.KUBE_TOKEN }})
        kubectl config set-context aragon --cluster=aragon --user=aragon
        kubectl config use-context aragon
    # replace deployment image
    - run: >
        kubectl set image deployment/court-backend-rinkeby
        server=$REPO:${GITHUB_SHA}
        services=$REPO:${GITHUB_SHA}
        app=$REPO:${GITHUB_SHA}
    - run: >
        kubectl set image deployment/court-backend-usability
        server=$REPO:${GITHUB_SHA}
        services=$REPO:${GITHUB_SHA}
        app=$REPO:${GITHUB_SHA}
    - run: >
        kubectl set image deployment/court-backend-staging
        server=$REPO:${GITHUB_SHA}
        services=$REPO:${GITHUB_SHA}
        app=$REPO:${GITHUB_SHA}
    - run: >
        kubectl set image deployment/court-backend-ropsten
        server=$REPO:${GITHUB_SHA}
        services=$REPO:${GITHUB_SHA}
        app=$REPO:${GITHUB_SHA}
    # wait 5 min for the new pod to be ready. If the pod is not ready there is a problem with the new container
    - run: >
        kubectl wait pod --for condition=Ready --timeout=300s
        $(kubectl get pods -l app=court-backend-rinkeby --sort-by {.metadata.creationTimestamp} -o jsonpath={.items[-1].metadata.name})
    - run: >
        kubectl wait pod --for condition=Ready --timeout=300s
        $(kubectl get pods -l app=court-backend-staging --sort-by {.metadata.creationTimestamp} -o jsonpath={.items[-1].metadata.name})
    - run: >
        kubectl wait pod --for condition=Ready --timeout=300s
        $(kubectl get pods -l app=court-backend-usability --sort-by {.metadata.creationTimestamp} -o jsonpath={.items[-1].metadata.name})
    - run: >
        kubectl wait pod --for condition=Ready --timeout=300s
        $(kubectl get pods -l app=court-backend-ropsten --sort-by {.metadata.creationTimestamp} -o jsonpath={.items[-1].metadata.name})
    # wait 10 sec for k8s to reroute ingress and check app endpoint
    - run: sleep 10 && curl --fail https://court-backend-app-rinkeby.eth.aragon.network
    - run: curl --fail https://court-backend-app-usability.eth.aragon.network
    - run: curl --fail https://court-backend-app-staging.eth.aragon.network
    - run: curl --fail https://court-backend-app-ropsten.eth.aragon.network
